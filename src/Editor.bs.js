// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Formality__Form = require("re-formality/src/Formality__Form.bs.js");
var Formality__Validation = require("re-formality/src/Formality__Validation.bs.js");
var Formality__PublicHelpers = require("re-formality/src/Formality__PublicHelpers.bs.js");
var API$ReasonReactRealworldExampleApp = require("./API.bs.js");
var Utils$ReasonReactRealworldExampleApp = require("./Utils.bs.js");
var Errors$ReasonReactRealworldExampleApp = require("./Errors.bs.js");
var Decoder$ReasonReactRealworldExampleApp = require("./Decoder.bs.js");

function get(field, state) {
  switch (field) {
    case 0 : 
        return state[/* title */0];
    case 1 : 
        return state[/* description */1];
    case 2 : 
        return state[/* body */2];
    case 3 : 
        return state[/* newTag */3];
    case 4 : 
        return Belt_List.toArray(state[/* tagList */4]).join(",");
    
  }
}

function update(param, state) {
  var value = param[1];
  switch (param[0]) {
    case 0 : 
        return /* record */[
                /* title */value,
                /* description */state[/* description */1],
                /* body */state[/* body */2],
                /* newTag */state[/* newTag */3],
                /* tagList */state[/* tagList */4]
              ];
    case 1 : 
        return /* record */[
                /* title */state[/* title */0],
                /* description */value,
                /* body */state[/* body */2],
                /* newTag */state[/* newTag */3],
                /* tagList */state[/* tagList */4]
              ];
    case 2 : 
        return /* record */[
                /* title */state[/* title */0],
                /* description */state[/* description */1],
                /* body */value,
                /* newTag */state[/* newTag */3],
                /* tagList */state[/* tagList */4]
              ];
    case 3 : 
        return /* record */[
                /* title */state[/* title */0],
                /* description */state[/* description */1],
                /* body */state[/* body */2],
                /* newTag */value,
                /* tagList */state[/* tagList */4]
              ];
    case 4 : 
        var tmp = value === "" ? /* [] */0 : Belt_List.fromArray(value.split(","));
        return /* record */[
                /* title */state[/* title */0],
                /* description */state[/* description */1],
                /* body */state[/* body */2],
                /* newTag */state[/* newTag */3],
                /* tagList */tmp
              ];
    
  }
}

function valueEmpty(value) {
  return value === "";
}

var Validators = Formality__Validation.MakeValidators(/* module */[]);

var validators = Curry._3(Validators[/* add */3], /* TagList */4, /* record */[
      /* strategy : OnFirstSuccessOrFirstBlur */3,
      /* dependents */undefined,
      /* validate */(function (_, _$1) {
          return /* Valid */0;
        })
    ], Curry._3(Validators[/* add */3], /* NewTag */3, /* record */[
          /* strategy : OnFirstSuccessOrFirstBlur */3,
          /* dependents */undefined,
          /* validate */(function (_, _$1) {
              return /* Valid */0;
            })
        ], Curry._3(Validators[/* add */3], /* Body */2, /* record */[
              /* strategy : OnFirstSuccessOrFirstBlur */3,
              /* dependents */undefined,
              /* validate */(function (value, _) {
                  if (value === "") {
                    return /* Invalid */["Body is empty"];
                  } else {
                    return /* Valid */0;
                  }
                })
            ], Curry._3(Validators[/* add */3], /* Description */1, /* record */[
                  /* strategy : OnFirstSuccessOrFirstBlur */3,
                  /* dependents */undefined,
                  /* validate */(function (value, _) {
                      if (value === "") {
                        return /* Invalid */["Description is empty"];
                      } else {
                        return /* Valid */0;
                      }
                    })
                ], Curry._3(Validators[/* add */3], /* Title */0, /* record */[
                      /* strategy : OnFirstSuccessOrFirstBlur */3,
                      /* dependents */undefined,
                      /* validate */(function (value, _) {
                          if (value === "") {
                            return /* Invalid */["Title is empty"];
                          } else {
                            return /* Valid */0;
                          }
                        })
                    ], Validators[/* empty */0])))));

var Form = /* module */[
  /* get */get,
  /* update */update,
  /* valueEmpty */valueEmpty,
  /* strategy : OnFirstSuccessOrFirstBlur */3,
  /* Validators */Validators,
  /* validators */validators
];

var FormContainer = Formality__Form.Make([
      get,
      update,
      valueEmpty,
      validators,
      [
        Validators[21],
        Validators[10]
      ]
    ]);

function loadArticle(slug, param) {
  var send = param[/* send */3];
  Curry._1(send, /* UpdateArticle */[/* Loading */1]);
  API$ReasonReactRealworldExampleApp.getArticle(slug, /* () */0).then((function (result) {
            if (result.tag) {
              Curry._1(send, /* UpdateArticle */[/* Failure */Block.__(0, ["failed to fetch article"])]);
            } else {
              var article = Json_decode.field("article", Decoder$ReasonReactRealworldExampleApp.article, result[0]);
              Curry._1(send, /* UpdateArticle */[/* Success */Block.__(1, [article])]);
            }
            return Promise.resolve(/* () */0);
          })).catch((function (error) {
          console.log("failed to fetch article", error);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function upsertArticle(slug, state, param) {
  var tagList = state[/* tagList */4];
  var body = state[/* body */2];
  var description = state[/* description */1];
  var title = state[/* title */0];
  var reset = param[/* reset */2];
  var notifyOnFailure = param[/* notifyOnFailure */1];
  var notifyOnSuccess = param[/* notifyOnSuccess */0];
  (
        slug !== undefined ? API$ReasonReactRealworldExampleApp.updateArticle(slug, title, description, body, tagList, /* () */0) : API$ReasonReactRealworldExampleApp.createArticle(title, description, body, tagList, /* () */0)
      ).then((function (result) {
            if (result.tag) {
              var errors = Json_decode.field("errors", (function (param) {
                      return Json_decode.dict((function (param) {
                                    return Json_decode.array(Json_decode.string, param);
                                  }), param);
                    }), result[0]);
              var fieldErrors = Belt_List.keepMapU(/* :: */[
                    Utils$ReasonReactRealworldExampleApp.getFirstError(/* Title */0, "Title", Js_primitive.undefined_to_opt(errors["title"])),
                    /* :: */[
                      Utils$ReasonReactRealworldExampleApp.getFirstError(/* Description */1, "Description", Js_primitive.undefined_to_opt(errors["description"])),
                      /* :: */[
                        Utils$ReasonReactRealworldExampleApp.getFirstError(/* Body */2, "Body", Js_primitive.undefined_to_opt(errors["body"])),
                        /* :: */[
                          Utils$ReasonReactRealworldExampleApp.getFirstError(/* TagList */4, "Tags", Js_primitive.undefined_to_opt(errors["tagList"])),
                          /* [] */0
                        ]
                      ]
                    ]
                  ], (function (opt) {
                      return opt;
                    }));
              Curry._2(notifyOnFailure, fieldErrors, undefined);
            } else {
              var article = Json_decode.field("article", Decoder$ReasonReactRealworldExampleApp.article, result[0]);
              Curry._1(notifyOnSuccess, undefined);
              Curry._1(reset, /* () */0);
              ReasonReact.Router[/* push */0]("/#/article/" + article[/* slug */0]);
            }
            return Promise.resolve(/* () */0);
          })).catch((function (error) {
          console.log("There has been a problem with fetch operation: ", error);
          Curry._2(notifyOnFailure, /* [] */0, "failed to create new article");
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

var component = ReasonReact.reducerComponentWithRetainedProps("Editor");

function make(slug, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (param) {
              if (slug !== undefined) {
                return Curry._2(param[/* handle */0], loadArticle, slug);
              } else {
                return /* () */0;
              }
            }),
          /* didUpdate */(function (param) {
              var newSelf = param[/* newSelf */1];
              var slugChanged = param[/* oldSelf */0][/* retainedProps */2][/* slug */0] !== newSelf[/* retainedProps */2][/* slug */0];
              if (slugChanged) {
                var match = newSelf[/* retainedProps */2][/* slug */0];
                if (match !== undefined) {
                  return Curry._2(newSelf[/* handle */0], loadArticle, match);
                } else {
                  return Curry._1(newSelf[/* send */3], /* UpdateArticle */[/* NotAsked */0]);
                }
              } else {
                return 0;
              }
            }),
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var state = param[/* state */1];
              var initialState;
              if (slug !== undefined && !(typeof state === "number" || state.tag !== 1)) {
                var match = state[0];
                initialState = /* record */[
                  /* title */match[/* title */1],
                  /* description */match[/* description */2],
                  /* body */match[/* body */3],
                  /* newTag */"",
                  /* tagList */match[/* tagList */4]
                ];
              } else {
                initialState = /* record */[
                  /* title */"",
                  /* description */"",
                  /* body */"",
                  /* newTag */"",
                  /* tagList : [] */0
                ];
              }
              var exit = 0;
              if (slug !== undefined) {
                if (typeof state === "number" || state.tag !== 1) {
                  return Utils$ReasonReactRealworldExampleApp.nullEl;
                } else {
                  exit = 1;
                }
              } else if (typeof state === "number" || state.tag !== 1) {
                exit = 1;
              } else {
                return Utils$ReasonReactRealworldExampleApp.nullEl;
              }
              if (exit === 1) {
                return ReasonReact.element(undefined, undefined, Curry._3(FormContainer[/* make */8], initialState, (function (param, param$1) {
                                  return upsertArticle(slug, param, param$1);
                                }), (function (form) {
                                  var match = form[/* status */1];
                                  var errors;
                                  if (typeof match === "number") {
                                    errors = match !== 0 ? undefined : Utils$ReasonReactRealworldExampleApp.getSomeErrors(form[/* results */2], /* :: */[
                                            /* Title */0,
                                            /* :: */[
                                              /* Description */1,
                                              /* :: */[
                                                /* Body */2,
                                                /* :: */[
                                                  /* TagList */4,
                                                  /* [] */0
                                                ]
                                              ]
                                            ]
                                          ]);
                                  } else {
                                    var match$1 = match[1];
                                    var fieldErrors = match[0];
                                    errors = match$1 !== undefined ? Belt_List.concat(Belt_List.mapU(fieldErrors, (function (param) {
                                                  return param[1];
                                                })), /* :: */[
                                            match$1,
                                            /* [] */0
                                          ]) : Belt_List.mapU(fieldErrors, (function (param) {
                                              return param[1];
                                            }));
                                  }
                                  var partial_arg = form[/* submit */6];
                                  var partial_arg$1 = Formality__PublicHelpers.Dom[/* preventDefault */4];
                                  var v = form[/* state */0][/* tagList */4];
                                  return React.createElement("div", {
                                              className: "editor-page"
                                            }, React.createElement("div", {
                                                  className: "container page"
                                                }, React.createElement("div", {
                                                      className: "row"
                                                    }, React.createElement("div", {
                                                          className: "col-md-10 offset-md-1 col-xs-12"
                                                        }, ReasonReact.element(undefined, undefined, Errors$ReasonReactRealworldExampleApp.make(errors, /* array */[])))), React.createElement("div", {
                                                      className: "row"
                                                    }, React.createElement("div", {
                                                          className: "col-md-10 offset-md-1 col-xs-12"
                                                        }, React.createElement("form", {
                                                              onSubmit: (function (param) {
                                                                  return partial_arg$1(partial_arg, param);
                                                                })
                                                            }, React.createElement("fieldset", undefined, React.createElement("fieldset", {
                                                                      className: "form-group"
                                                                    }, React.createElement("input", {
                                                                          className: "form-control form-control-lg",
                                                                          disabled: form[/* submitting */3],
                                                                          placeholder: "Article Title",
                                                                          type: "text",
                                                                          value: form[/* state */0][/* title */0],
                                                                          onBlur: (function ($$event) {
                                                                              return Curry._2(form[/* change */4], /* Title */0, Formality__PublicHelpers.Dom[/* toValueOnBlur */1]($$event));
                                                                            }),
                                                                          onChange: (function ($$event) {
                                                                              return Curry._2(form[/* change */4], /* Title */0, Formality__PublicHelpers.Dom[/* toValueOnChange */0]($$event));
                                                                            })
                                                                        })), React.createElement("fieldset", {
                                                                      className: "form-group"
                                                                    }, React.createElement("input", {
                                                                          className: "form-control",
                                                                          disabled: form[/* submitting */3],
                                                                          placeholder: "What's this article about?",
                                                                          type: "text",
                                                                          value: form[/* state */0][/* description */1],
                                                                          onBlur: (function ($$event) {
                                                                              return Curry._2(form[/* change */4], /* Description */1, Formality__PublicHelpers.Dom[/* toValueOnBlur */1]($$event));
                                                                            }),
                                                                          onChange: (function ($$event) {
                                                                              return Curry._2(form[/* change */4], /* Description */1, Formality__PublicHelpers.Dom[/* toValueOnChange */0]($$event));
                                                                            })
                                                                        })), React.createElement("fieldset", {
                                                                      className: "form-group"
                                                                    }, React.createElement("textarea", {
                                                                          className: "form-control",
                                                                          disabled: form[/* submitting */3],
                                                                          placeholder: "Write your article (in markdown)",
                                                                          rows: 8,
                                                                          value: form[/* state */0][/* body */2],
                                                                          onBlur: (function ($$event) {
                                                                              return Curry._2(form[/* change */4], /* Body */2, Formality__PublicHelpers.Dom[/* toValueOnBlur */1]($$event));
                                                                            }),
                                                                          onChange: (function ($$event) {
                                                                              return Curry._2(form[/* change */4], /* Body */2, Formality__PublicHelpers.Dom[/* toValueOnChange */0]($$event));
                                                                            })
                                                                        })), React.createElement("fieldset", {
                                                                      className: "form-group"
                                                                    }, React.createElement("input", {
                                                                          className: "form-control",
                                                                          disabled: form[/* submitting */3],
                                                                          placeholder: "Enter tags",
                                                                          type: "text",
                                                                          value: form[/* state */0][/* newTag */3],
                                                                          onKeyDown: (function ($$event) {
                                                                              var match = $$event.keyCode;
                                                                              if (match !== 13) {
                                                                                return /* () */0;
                                                                              } else {
                                                                                $$event.preventDefault();
                                                                                var newTag = form[/* state */0][/* newTag */3].trim();
                                                                                var haveDuplicated = Belt_List.has(form[/* state */0][/* tagList */4], newTag, (function (prim, prim$1) {
                                                                                        return prim === prim$1;
                                                                                      }));
                                                                                var isEmpty = newTag === "";
                                                                                if (haveDuplicated || isEmpty) {
                                                                                  return /* () */0;
                                                                                } else {
                                                                                  Curry._2(form[/* change */4], /* TagList */4, Belt_List.toArray(/* :: */[
                                                                                              form[/* state */0][/* newTag */3],
                                                                                              form[/* state */0][/* tagList */4]
                                                                                            ]).join(","));
                                                                                  return Curry._2(form[/* change */4], /* NewTag */3, "");
                                                                                }
                                                                              }
                                                                            }),
                                                                          onBlur: (function ($$event) {
                                                                              return Curry._2(form[/* change */4], /* NewTag */3, Formality__PublicHelpers.Dom[/* toValueOnBlur */1]($$event));
                                                                            }),
                                                                          onChange: (function ($$event) {
                                                                              return Curry._2(form[/* change */4], /* NewTag */3, Formality__PublicHelpers.Dom[/* toValueOnChange */0]($$event));
                                                                            })
                                                                        }), v ? React.createElement("div", {
                                                                            className: "tag-list"
                                                                          }, Utils$ReasonReactRealworldExampleApp.arrayEl(Belt_List.toArray(Belt_List.mapWithIndex(v, (function (i, tag) {
                                                                                          return React.createElement("span", {
                                                                                                      key: String(i) + ("." + tag),
                                                                                                      className: "tag-default tag-pill"
                                                                                                    }, React.createElement("i", {
                                                                                                          className: "ion-close-round",
                                                                                                          onClick: (function () {
                                                                                                              return Curry._2(form[/* change */4], /* TagList */4, Belt_List.toArray(Belt_List.keep(v, (function (x) {
                                                                                                                                      return x !== tag;
                                                                                                                                    }))).join(","));
                                                                                                            })
                                                                                                        }), Utils$ReasonReactRealworldExampleApp.strEl(tag));
                                                                                        }))))) : Utils$ReasonReactRealworldExampleApp.nullEl), React.createElement("button", {
                                                                      className: "btn btn-lg pull-xs-right btn-primary",
                                                                      disabled: form[/* submitting */3]
                                                                    }, Utils$ReasonReactRealworldExampleApp.strEl("Publish Article"))))))));
                                })));
              }
              
            }),
          /* initialState */(function () {
              return /* NotAsked */0;
            }),
          /* retainedProps : record */[/* slug */slug],
          /* reducer */(function (action, _) {
              return /* Update */Block.__(0, [action[0]]);
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.Form = Form;
exports.FormContainer = FormContainer;
exports.loadArticle = loadArticle;
exports.upsertArticle = upsertArticle;
exports.component = component;
exports.make = make;
/* Validators Not a pure module */
