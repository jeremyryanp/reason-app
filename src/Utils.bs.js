// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var DocumentRe = require("bs-webapi/src/dom/nodes/DocumentRe.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function strEl(prim) {
  return prim;
}

function arrayEl(prim) {
  return prim;
}

var nullEl = null;

function id(a) {
  return a;
}

function getSomeErrors(results, fields) {
  var validation = Belt_List.flatten(Belt_List.mapU(fields, (function (field) {
              var match = Curry._1(results, field);
              if (match !== undefined) {
                var match$1 = match;
                if (match$1) {
                  return /* :: */[
                          match$1[0],
                          /* [] */0
                        ];
                } else {
                  return /* [] */0;
                }
              } else {
                return /* [] */0;
              }
            })));
  if (validation) {
    return validation;
  }
  
}

function getFirstError(field, prefix, errors) {
  return Belt_Option.mapU(errors, (function (errors) {
                return /* tuple */[
                        field,
                        prefix + " " + Belt_Option.getWithDefault(Belt_Array.get(errors, 0), "is unknown error")
                      ];
              }));
}

function setCookie(key, value) {
  Belt_Option.mapU(DocumentRe.asHtmlDocument(document), (function (htmlDocument) {
          htmlDocument.cookie = key + ("=" + (value + ";")) + htmlDocument.cookie;
          return /* () */0;
        }));
  return /* () */0;
}

function getCookie(target) {
  return Belt_Option.flatMapU(DocumentRe.asHtmlDocument(document), (function (htmlDocument) {
                return Belt_Option.flatMapU(Js_primitive.undefined_to_opt(htmlDocument.cookie.split(";").map((function (cookieStr) {
                                        var match = cookieStr.split("=");
                                        var len = match.length;
                                        if (len >= 3) {
                                          return /* tuple */[
                                                  "",
                                                  ""
                                                ];
                                        } else {
                                          switch (len) {
                                            case 0 : 
                                            case 1 : 
                                                return /* tuple */[
                                                        "",
                                                        ""
                                                      ];
                                            case 2 : 
                                                var name = match[0];
                                                var value = match[1];
                                                return /* tuple */[
                                                        name.trim(),
                                                        value.trim()
                                                      ];
                                            
                                          }
                                        }
                                      })).find((function (param) {
                                      return target === param[0];
                                    }))), (function (param) {
                              var value = param[1];
                              var match = value === "";
                              if (match) {
                                return undefined;
                              } else {
                                return value;
                              }
                            }));
              }));
}

function remoteDataToStr(param) {
  if (typeof param === "number") {
    if (param === 0) {
      return "NotAsked";
    } else {
      return "Loading";
    }
  } else if (param.tag) {
    return "Success";
  } else {
    return "Failure";
  }
}

exports.strEl = strEl;
exports.arrayEl = arrayEl;
exports.nullEl = nullEl;
exports.id = id;
exports.getSomeErrors = getSomeErrors;
exports.getFirstError = getFirstError;
exports.setCookie = setCookie;
exports.getCookie = getCookie;
exports.remoteDataToStr = remoteDataToStr;
/* nullEl Not a pure module */
