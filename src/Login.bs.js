// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Formality__Form = require("re-formality/src/Formality__Form.bs.js");
var Formality__Validation = require("re-formality/src/Formality__Validation.bs.js");
var Formality__PublicHelpers = require("re-formality/src/Formality__PublicHelpers.bs.js");
var API$ReasonReactRealworldExampleApp = require("./API.bs.js");
var Utils$ReasonReactRealworldExampleApp = require("./Utils.bs.js");
var Decoder$ReasonReactRealworldExampleApp = require("./Decoder.bs.js");
var FormBody$ReasonReactRealworldExampleApp = require("./FormBody.bs.js");

function get(field, state) {
  if (field) {
    return state[/* password */1];
  } else {
    return state[/* email */0];
  }
}

function update(param, state) {
  var value = param[1];
  if (param[0]) {
    return /* record */[
            /* email */state[/* email */0],
            /* password */value
          ];
  } else {
    return /* record */[
            /* email */value,
            /* password */state[/* password */1]
          ];
  }
}

function valueEmpty(value) {
  return value === "";
}

var Validators = Formality__Validation.MakeValidators(/* module */[]);

var validators = Curry._3(Validators[/* add */3], /* Password */1, /* record */[
      /* strategy : OnFirstSuccessOrFirstBlur */3,
      /* dependents */undefined,
      /* validate */(function (value, _) {
          if (value === "") {
            return /* Invalid */["Password is empty"];
          } else {
            return /* Valid */0;
          }
        })
    ], Curry._3(Validators[/* add */3], /* Email */0, /* record */[
          /* strategy : OnFirstSuccessOrFirstBlur */3,
          /* dependents */undefined,
          /* validate */(function (value, _) {
              if (value === "") {
                return /* Invalid */["Email is empty"];
              } else {
                return /* Valid */0;
              }
            })
        ], Validators[/* empty */0]));

var Form = /* module */[
  /* get */get,
  /* update */update,
  /* valueEmpty */valueEmpty,
  /* strategy : OnFirstSuccessOrFirstBlur */3,
  /* Validators */Validators,
  /* validators */validators
];

var FormContainer = Formality__Form.Make([
      get,
      update,
      valueEmpty,
      validators,
      [
        Validators[21],
        Validators[10]
      ]
    ]);

var component = ReasonReact.statelessComponent("Login");

function make(onSuccessLogin, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return ReasonReact.element(undefined, undefined, Curry._3(FormContainer[/* make */8], /* record */[
                              /* email */"",
                              /* password */""
                            ], (function (state, param) {
                                var reset = param[/* reset */2];
                                var notifyOnFailure = param[/* notifyOnFailure */1];
                                var notifyOnSuccess = param[/* notifyOnSuccess */0];
                                API$ReasonReactRealworldExampleApp.login(state[/* email */0], state[/* password */1], /* () */0).then((function (result) {
                                          if (result.tag) {
                                            var errors = Json_decode.field("errors", (function (param) {
                                                    return Json_decode.dict((function (param) {
                                                                  return Json_decode.array(Json_decode.string, param);
                                                                }), param);
                                                  }), result[0]);
                                            var fieldErrors = Belt_List.keepMapU(/* :: */[
                                                  Utils$ReasonReactRealworldExampleApp.getFirstError(/* Email */0, "Email or password", Js_primitive.undefined_to_opt(errors["email or password"])),
                                                  /* [] */0
                                                ], (function (opt) {
                                                    return opt;
                                                  }));
                                            Curry._2(notifyOnFailure, fieldErrors, undefined);
                                          } else {
                                            var user = Json_decode.field("user", Decoder$ReasonReactRealworldExampleApp.user, result[0]);
                                            Curry._1(notifyOnSuccess, undefined);
                                            Curry._1(reset, /* () */0);
                                            Utils$ReasonReactRealworldExampleApp.setCookie("token", user[/* token */3]);
                                            Curry._1(onSuccessLogin, /* () */0);
                                            ReasonReact.Router[/* push */0]("/#/");
                                          }
                                          return Promise.resolve(/* () */0);
                                        })).catch((function (error) {
                                        console.log("There has been a problem with fetch operation: ", error);
                                        Curry._2(notifyOnFailure, /* [] */0, "failed to login");
                                        return Promise.resolve(/* () */0);
                                      }));
                                return /* () */0;
                              }), (function (form) {
                                var partial_arg = form[/* submit */6];
                                var partial_arg$1 = Formality__PublicHelpers.Dom[/* preventDefault */4];
                                var match = form[/* status */1];
                                var tmp;
                                if (typeof match === "number") {
                                  tmp = match !== 0 ? undefined : Utils$ReasonReactRealworldExampleApp.getSomeErrors(form[/* results */2], /* :: */[
                                          /* Email */0,
                                          /* :: */[
                                            /* Password */1,
                                            /* [] */0
                                          ]
                                        ]);
                                } else {
                                  var match$1 = match[1];
                                  var fieldErrors = match[0];
                                  tmp = match$1 !== undefined ? Belt_List.concat(Belt_List.mapU(fieldErrors, (function (param) {
                                                return param[1];
                                              })), /* :: */[
                                          match$1,
                                          /* [] */0
                                        ]) : Belt_List.mapU(fieldErrors, (function (param) {
                                            return param[1];
                                          }));
                                }
                                return ReasonReact.element(undefined, undefined, FormBody$ReasonReactRealworldExampleApp.make("", (function () {
                                                  return /* () */0;
                                                }), (function () {
                                                  return /* () */0;
                                                }), form[/* state */0][/* email */0], (function ($$event) {
                                                  return Curry._2(form[/* change */4], /* Email */0, Formality__PublicHelpers.Dom[/* toValueOnChange */0]($$event));
                                                }), (function ($$event) {
                                                  return Curry._2(form[/* change */4], /* Email */0, Formality__PublicHelpers.Dom[/* toValueOnBlur */1]($$event));
                                                }), form[/* state */0][/* password */1], (function ($$event) {
                                                  return Curry._2(form[/* change */4], /* Password */1, Formality__PublicHelpers.Dom[/* toValueOnChange */0]($$event));
                                                }), (function ($$event) {
                                                  return Curry._2(form[/* change */4], /* Password */1, Formality__PublicHelpers.Dom[/* toValueOnBlur */1]($$event));
                                                }), (function (param) {
                                                  return partial_arg$1(partial_arg, param);
                                                }), tmp, /* Login */1, form[/* submitting */3], /* array */[]));
                              })));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.Form = Form;
exports.FormContainer = FormContainer;
exports.component = component;
exports.make = make;
/* Validators Not a pure module */
