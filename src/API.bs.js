// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/src/Json.bs.js");
var Block = require("bs-platform/lib/js/block.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Utils$ReasonReactRealworldExampleApp = require("./Utils.bs.js");

var host = "http://localhost:8080/rest-client";

function optToQueryString(prefix, opt) {
  return Belt_Option.mapWithDefault(opt, "", (function (param) {
                return prefix + param;
              }));
}

function getResultIfOk(res) {
  var isOk = res.ok;
  return res.json().then((function (json) {
                return Promise.resolve(isOk ? /* Ok */Block.__(0, [json]) : /* Error */Block.__(1, [json]));
              }));
}

function makeFetchInit(body, $staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, _) {
  var method__ = $staropt$star !== undefined ? $staropt$star : /* Get */0;
  var includeCookie = $staropt$star$1 !== undefined ? $staropt$star$1 : true;
  var authorization = $staropt$star$2 !== undefined ? $staropt$star$2 : false;
  var jsonContentType = $staropt$star$3 !== undefined ? $staropt$star$3 : false;
  var obj = { };
  if (authorization) {
    obj = Object.assign(obj, Belt_Option.mapWithDefault(Utils$ReasonReactRealworldExampleApp.getCookie("token"), { }, (function (value) {
                return {
                        Authorization: "Token " + value
                      };
              })));
  }
  if (jsonContentType) {
    obj = Object.assign(obj, {
          "Content-Type": "application/json; charset=utf-8"
        });
  }
  var headers = obj;
  var credentials = includeCookie ? /* Include */2 : undefined;
  return Fetch.RequestInit[/* make */0](method__, Js_primitive.some(headers), body, undefined, undefined, undefined, credentials, undefined, undefined, undefined, undefined)(/* () */0);
}

function listFiles($staropt$star, $staropt$star$1, _) {
  var limit = $staropt$star !== undefined ? $staropt$star : 20;
  var offset = $staropt$star$1 !== undefined ? $staropt$star$1 : 0;
  var url = host + ("/api/content/filelimit=" + (String(limit) + ("&offset=" + String(offset))));
  return fetch(url, makeFetchInit(undefined, undefined, undefined, true, undefined, /* () */0)).then(getResultIfOk);
}

function listArticlesFeed($staropt$star, $staropt$star$1, _) {
  var limit = $staropt$star !== undefined ? $staropt$star : 20;
  var offset = $staropt$star$1 !== undefined ? $staropt$star$1 : 0;
  var url = host + ("/api/articles/feed?limit=" + (String(limit) + ("&offset=" + String(offset))));
  return fetch(url, makeFetchInit(undefined, undefined, undefined, true, undefined, /* () */0)).then(getResultIfOk);
}

function listArticles(tag, author, favorited, $staropt$star, $staropt$star$1, _) {
  var limit = $staropt$star !== undefined ? $staropt$star : 20;
  var offset = $staropt$star$1 !== undefined ? $staropt$star$1 : 0;
  var url = host + ("/api/articles?limit=" + (String(limit) + ("&offset=" + (String(offset) + (optToQueryString("&tag=", tag) + (optToQueryString("&author=", author) + optToQueryString("&favorited=", favorited)))))));
  return fetch(url, makeFetchInit(undefined, undefined, undefined, true, undefined, /* () */0)).then(getResultIfOk);
}

function tags() {
  var url = "http://localhost:8080/rest-client/api/tags";
  return fetch(url, makeFetchInit(undefined, undefined, undefined, undefined, undefined, /* () */0)).then(getResultIfOk);
}

function profiles(author, _) {
  var url = host + ("/api/profiles/" + author);
  return fetch(url, makeFetchInit(undefined, undefined, undefined, true, undefined, /* () */0)).then(getResultIfOk);
}

function followUser(username, _) {
  var url = host + ("/api/profiles/" + (username + "/follow"));
  return fetch(url, makeFetchInit(undefined, /* Post */2, undefined, true, undefined, /* () */0)).then(getResultIfOk);
}

function unfollowUser(username, _) {
  var url = host + ("/api/profiles/" + (username + "/follow"));
  return fetch(url, makeFetchInit(undefined, /* Delete */4, undefined, true, undefined, /* () */0)).then(getResultIfOk);
}

function getArticle(slug, _) {
  var url = host + ("/api/articles/" + slug);
  return fetch(url, makeFetchInit(undefined, undefined, undefined, true, undefined, /* () */0)).then(getResultIfOk);
}

function deleteArticle(slug, _) {
  var url = host + ("/api/articles/" + slug);
  return fetch(url, makeFetchInit(undefined, /* Delete */4, undefined, true, undefined, /* () */0)).then(getResultIfOk);
}

function favoriteArticle(slug, _) {
  var url = host + ("/api/articles/" + (slug + "/favorite"));
  return fetch(url, makeFetchInit(undefined, /* Post */2, undefined, true, undefined, /* () */0)).then(getResultIfOk);
}

function unfavoriteArticle(slug, _) {
  var url = host + ("/api/articles/" + (slug + "/favorite"));
  return fetch(url, makeFetchInit(undefined, /* Delete */4, undefined, true, undefined, /* () */0)).then(getResultIfOk);
}

function comments(slug, _) {
  var url = host + ("/api/articles/" + (slug + "/comments"));
  return fetch(url, makeFetchInit(undefined, undefined, undefined, undefined, undefined, /* () */0)).then(getResultIfOk);
}

function addCommentsToAnArticle(slug, body, _) {
  var url = host + ("/api/articles/" + (slug + "/comments"));
  return fetch(url, makeFetchInit(Js_primitive.some(Json.stringify(Json_encode.object_(/* :: */[
                                /* tuple */[
                                  "comment",
                                  Json_encode.object_(/* :: */[
                                        /* tuple */[
                                          "body",
                                          body
                                        ],
                                        /* [] */0
                                      ])
                                ],
                                /* [] */0
                              ]))), /* Post */2, undefined, true, true, /* () */0)).then(getResultIfOk);
}

function deleteComment(slug, id, _) {
  var url = host + ("/api/articles/" + (slug + ("/comments/" + String(id))));
  return fetch(url, makeFetchInit(undefined, /* Delete */4, undefined, true, undefined, /* () */0)).then(getResultIfOk);
}

function user() {
  var url = "http://localhost:8080/rest-client/api/user";
  return fetch(url, makeFetchInit(undefined, undefined, undefined, true, undefined, /* () */0)).then(getResultIfOk);
}

function updateUser(email, username, password, image, bio, _) {
  var url = "http://localhost:8080/rest-client/api/user";
  return fetch(url, makeFetchInit(Js_primitive.some(Json.stringify(Json_encode.object_(/* :: */[
                                /* tuple */[
                                  "user",
                                  Json_encode.object_(/* :: */[
                                        /* tuple */[
                                          "email",
                                          email
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "username",
                                            username
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              "password",
                                              password
                                            ],
                                            /* :: */[
                                              /* tuple */[
                                                "image",
                                                image
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  "bio",
                                                  bio
                                                ],
                                                /* [] */0
                                              ]
                                            ]
                                          ]
                                        ]
                                      ])
                                ],
                                /* [] */0
                              ]))), /* Put */3, undefined, true, true, /* () */0)).then(getResultIfOk);
}

function register(email, password, username, _) {
  var url = "http://localhost:8080/rest-client/api/users";
  return fetch(url, makeFetchInit(Js_primitive.some(Json.stringify(Json_encode.object_(/* :: */[
                                /* tuple */[
                                  "user",
                                  Json_encode.object_(/* :: */[
                                        /* tuple */[
                                          "username",
                                          username
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "email",
                                            email
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              "password",
                                              password
                                            ],
                                            /* [] */0
                                          ]
                                        ]
                                      ])
                                ],
                                /* [] */0
                              ]))), /* Post */2, undefined, true, undefined, /* () */0)).then(getResultIfOk);
}

function login(email, password, _) {
  var url = "http://localhost:8080/rest-client/api/user/login";
  alert("lets do this");
  return fetch(url, makeFetchInit(Js_primitive.some(Json.stringify(Json_encode.object_(/* :: */[
                                /* tuple */[
                                  "user",
                                  Json_encode.object_(/* :: */[
                                        /* tuple */[
                                          "uin",
                                          email
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "password",
                                            password
                                          ],
                                          /* [] */0
                                        ]
                                      ])
                                ],
                                /* [] */0
                              ]))), /* Post */2, undefined, undefined, true, /* () */0)).then(getResultIfOk);
}

function createArticle(title, description, body, tagList, _) {
  var url = "http://localhost:8080/rest-client/api/articles";
  return fetch(url, makeFetchInit(Js_primitive.some(Json.stringify(Json_encode.object_(/* :: */[
                                /* tuple */[
                                  "article",
                                  Json_encode.object_(/* :: */[
                                        /* tuple */[
                                          "title",
                                          title
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "description",
                                            description
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              "body",
                                              body
                                            ],
                                            /* :: */[
                                              /* tuple */[
                                                "tagList",
                                                Json_encode.array((function (prim) {
                                                        return prim;
                                                      }), Belt_List.toArray(tagList))
                                              ],
                                              /* [] */0
                                            ]
                                          ]
                                        ]
                                      ])
                                ],
                                /* [] */0
                              ]))), /* Post */2, undefined, true, true, /* () */0)).then(getResultIfOk);
}

function updateArticle(slug, title, description, body, tagList, _) {
  var url = host + ("/api/articles/" + slug);
  var article = Json_encode.object_(Belt_List.flatten(/* :: */[
            title !== undefined ? /* :: */[
                /* tuple */[
                  "title",
                  title
                ],
                /* [] */0
              ] : /* [] */0,
            /* :: */[
              description !== undefined ? /* :: */[
                  /* tuple */[
                    "description",
                    description
                  ],
                  /* [] */0
                ] : /* [] */0,
              /* :: */[
                body !== undefined ? /* :: */[
                    /* tuple */[
                      "body",
                      body
                    ],
                    /* [] */0
                  ] : /* [] */0,
                /* :: */[
                  tagList !== undefined ? /* :: */[
                      /* tuple */[
                        "tagList",
                        Json_encode.array((function (prim) {
                                return prim;
                              }), Belt_List.toArray(tagList))
                      ],
                      /* [] */0
                    ] : /* [] */0,
                  /* [] */0
                ]
              ]
            ]
          ]));
  return fetch(url, makeFetchInit(Js_primitive.some(Json.stringify(Json_encode.object_(/* :: */[
                                /* tuple */[
                                  "article",
                                  article
                                ],
                                /* [] */0
                              ]))), /* Put */3, undefined, true, true, /* () */0)).then(getResultIfOk);
}

exports.host = host;
exports.optToQueryString = optToQueryString;
exports.getResultIfOk = getResultIfOk;
exports.makeFetchInit = makeFetchInit;
exports.listFiles = listFiles;
exports.listArticlesFeed = listArticlesFeed;
exports.listArticles = listArticles;
exports.tags = tags;
exports.profiles = profiles;
exports.followUser = followUser;
exports.unfollowUser = unfollowUser;
exports.getArticle = getArticle;
exports.deleteArticle = deleteArticle;
exports.favoriteArticle = favoriteArticle;
exports.unfavoriteArticle = unfavoriteArticle;
exports.comments = comments;
exports.addCommentsToAnArticle = addCommentsToAnArticle;
exports.deleteComment = deleteComment;
exports.user = user;
exports.updateUser = updateUser;
exports.register = register;
exports.login = login;
exports.createArticle = createArticle;
exports.updateArticle = updateArticle;
/* Json_encode Not a pure module */
