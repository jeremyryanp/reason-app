// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var API$ReasonReactRealworldExampleApp = require("../API.bs.js");
var Utils$ReasonReactRealworldExampleApp = require("../Utils.bs.js");
var JestFetchMock$ReasonReactRealworldExampleApp = require("../JestFetchMock.bs.js");

describe("optToQueryString", (function () {
        Jest.test("None returns empty string", (function () {
                var actual = API$ReasonReactRealworldExampleApp.optToQueryString("", undefined);
                return Jest.Expect[/* toBe */2]("", Jest.Expect[/* expect */0](actual));
              }));
        Jest.test("None returns empty string and ignore prefix", (function () {
                var actual = API$ReasonReactRealworldExampleApp.optToQueryString("PREFIX-", undefined);
                return Jest.Expect[/* toBe */2]("", Jest.Expect[/* expect */0](actual));
              }));
        Jest.test("Some returns string with custom prefix", (function () {
                var actual = API$ReasonReactRealworldExampleApp.optToQueryString("PREFIX-", "yeah");
                return Jest.Expect[/* toBe */2]("PREFIX-yeah", Jest.Expect[/* expect */0](actual));
              }));
        return Jest.test("Some returns string with empty prefix", (function () {
                      var actual = API$ReasonReactRealworldExampleApp.optToQueryString("", "yeah");
                      return Jest.Expect[/* toBe */2]("yeah", Jest.Expect[/* expect */0](actual));
                    }));
      }));

describe("getResultIfOk", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        Jest.testPromise("returns Ok if Fetch response ok", undefined, (function () {
                JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
                return fetch(API$ReasonReactRealworldExampleApp.host, API$ReasonReactRealworldExampleApp.makeFetchInit(undefined, undefined, undefined, undefined, undefined, /* () */0)).then(API$ReasonReactRealworldExampleApp.getResultIfOk).then((function (actual) {
                              var expected = /* Ok */Block.__(0, ["ok"]);
                              return Promise.resolve(Jest.Expect[/* toEqual */12](expected, Jest.Expect[/* expect */0](actual)));
                            }));
              }));
        Jest.testPromise("returns Error if Fetch response is not ok and status is 400", undefined, (function () {
                JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"not ok 400\"", 400, "400", /* () */0);
                return fetch(API$ReasonReactRealworldExampleApp.host, API$ReasonReactRealworldExampleApp.makeFetchInit(undefined, undefined, undefined, undefined, undefined, /* () */0)).then(API$ReasonReactRealworldExampleApp.getResultIfOk).then((function (actual) {
                              var expected = /* Error */Block.__(1, ["not ok 400"]);
                              return Promise.resolve(Jest.Expect[/* toEqual */12](expected, Jest.Expect[/* expect */0](actual)));
                            }));
              }));
        return Jest.testPromise("returns Error if Fetch response is not ok and status is 500", undefined, (function () {
                      JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"not ok 500\"", 500, "500", /* () */0);
                      return fetch(API$ReasonReactRealworldExampleApp.host, API$ReasonReactRealworldExampleApp.makeFetchInit(undefined, undefined, undefined, undefined, undefined, /* () */0)).then(API$ReasonReactRealworldExampleApp.getResultIfOk).then((function (actual) {
                                    var expected = /* Error */Block.__(1, ["not ok 500"]);
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](expected, Jest.Expect[/* expect */0](actual)));
                                  }));
                    }));
      }));

describe("makeFetchInit", (function () {
        var origToken = /* record */[/* contents */undefined];
        beforeAll((function () {
                origToken[0] = Utils$ReasonReactRealworldExampleApp.getCookie("token");
                return /* () */0;
              }));
        afterEach((function () {
                var match = origToken[0];
                if (match !== undefined) {
                  Utils$ReasonReactRealworldExampleApp.setCookie("token", match);
                } else {
                  Utils$ReasonReactRealworldExampleApp.setCookie("token", "");
                }
                return /* () */0;
              }));
        Jest.test("no argument", (function () {
                var actual = API$ReasonReactRealworldExampleApp.makeFetchInit(undefined, undefined, undefined, undefined, undefined, /* () */0);
                return Jest.Expect[/* toMatchSnapshot */16](Jest.Expect[/* expect */0](actual));
              }));
        Jest.test("custom method with POST", (function () {
                var actual = API$ReasonReactRealworldExampleApp.makeFetchInit(undefined, /* Post */2, undefined, undefined, undefined, /* () */0);
                return Jest.Expect[/* toMatchSnapshot */16](Jest.Expect[/* expect */0](actual));
              }));
        Jest.test("should not include credential", (function () {
                var actual = API$ReasonReactRealworldExampleApp.makeFetchInit(undefined, undefined, false, undefined, undefined, /* () */0);
                return Jest.Expect[/* toMatchSnapshot */16](Jest.Expect[/* expect */0](actual));
              }));
        Jest.test("add \"Authorization: Token \" to header", (function () {
                Utils$ReasonReactRealworldExampleApp.setCookie("token", "@@unit test@@");
                var actual = API$ReasonReactRealworldExampleApp.makeFetchInit(undefined, undefined, undefined, true, undefined, /* () */0);
                return Jest.Expect[/* toMatchSnapshot */16](Jest.Expect[/* expect */0](actual));
              }));
        return Jest.test("add \"Content-Type: application/json; charset=utf-8\" to header", (function () {
                      var actual = API$ReasonReactRealworldExampleApp.makeFetchInit(undefined, undefined, undefined, undefined, true, /* () */0);
                      return Jest.Expect[/* toMatchSnapshot */16](Jest.Expect[/* expect */0](actual));
                    }));
      }));

describe("listArticlesFeed", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        Jest.testPromise("default", undefined, (function () {
                return API$ReasonReactRealworldExampleApp.listArticlesFeed(undefined, undefined, /* () */0).then((function () {
                              return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                              "https://conduit.productionready.io/api/articles/feed?limit=20&offset=0",
                                              "GET",
                                              "include"
                                            ], Jest.Expect[/* expect */0](/* tuple */[
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                ])));
                            }));
              }));
        Jest.testPromise("limit 5", undefined, (function () {
                return API$ReasonReactRealworldExampleApp.listArticlesFeed(5, undefined, /* () */0).then((function () {
                              return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                              "https://conduit.productionready.io/api/articles/feed?limit=5&offset=0",
                                              "GET",
                                              "include"
                                            ], Jest.Expect[/* expect */0](/* tuple */[
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                ])));
                            }));
              }));
        return Jest.testPromise("offset 10", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.listArticlesFeed(undefined, 10, /* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/articles/feed?limit=20&offset=10",
                                                    "GET",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("listArticles", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        Jest.testPromise("default", undefined, (function () {
                return API$ReasonReactRealworldExampleApp.listArticles(undefined, undefined, undefined, undefined, undefined, /* () */0).then((function () {
                              return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                              "https://conduit.productionready.io/api/articles?limit=20&offset=0",
                                              "GET",
                                              "include"
                                            ], Jest.Expect[/* expect */0](/* tuple */[
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                ])));
                            }));
              }));
        Jest.testPromise("all combined", undefined, (function () {
                return API$ReasonReactRealworldExampleApp.listArticles("@tag@", "@author@", "@favorited@", 5, 10, /* () */0).then((function () {
                              return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                              "https://conduit.productionready.io/api/articles?limit=5&offset=10&tag=@tag@&author=@author@&favorited=@favorited@",
                                              "GET",
                                              "include"
                                            ], Jest.Expect[/* expect */0](/* tuple */[
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                ])));
                            }));
              }));
        Jest.testPromise("tag `@tag@`", undefined, (function () {
                return API$ReasonReactRealworldExampleApp.listArticles("@tag@", undefined, undefined, undefined, undefined, /* () */0).then((function () {
                              return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                              "https://conduit.productionready.io/api/articles?limit=20&offset=0&tag=@tag@",
                                              "GET",
                                              "include"
                                            ], Jest.Expect[/* expect */0](/* tuple */[
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                ])));
                            }));
              }));
        Jest.testPromise("author `@author@`", undefined, (function () {
                return API$ReasonReactRealworldExampleApp.listArticles(undefined, "@author@", undefined, undefined, undefined, /* () */0).then((function () {
                              return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                              "https://conduit.productionready.io/api/articles?limit=20&offset=0&author=@author@",
                                              "GET",
                                              "include"
                                            ], Jest.Expect[/* expect */0](/* tuple */[
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                ])));
                            }));
              }));
        Jest.testPromise("favorited `@favorited@`", undefined, (function () {
                return API$ReasonReactRealworldExampleApp.listArticles(undefined, undefined, "@favorited@", undefined, undefined, /* () */0).then((function () {
                              return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                              "https://conduit.productionready.io/api/articles?limit=20&offset=0&favorited=@favorited@",
                                              "GET",
                                              "include"
                                            ], Jest.Expect[/* expect */0](/* tuple */[
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                ])));
                            }));
              }));
        Jest.testPromise("limit 5", undefined, (function () {
                return API$ReasonReactRealworldExampleApp.listArticles(undefined, undefined, undefined, 5, undefined, /* () */0).then((function () {
                              return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                              "https://conduit.productionready.io/api/articles?limit=5&offset=0",
                                              "GET",
                                              "include"
                                            ], Jest.Expect[/* expect */0](/* tuple */[
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                  Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                ])));
                            }));
              }));
        return Jest.testPromise("offset 10", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.listArticles(undefined, undefined, undefined, undefined, 10, /* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/articles?limit=20&offset=10",
                                                    "GET",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("tags", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        return Jest.testPromise("default", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.tags(/* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/tags",
                                                    "GET",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("profiles", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        return Jest.testPromise("default", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.profiles("@author@", /* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/profiles/@author@",
                                                    "GET",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("followUser", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        return Jest.testPromise("default", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.followUser("@username@", /* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/profiles/@username@/follow",
                                                    "POST",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("unfollowUser", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        return Jest.testPromise("default", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.unfollowUser("@username@", /* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/profiles/@username@/follow",
                                                    "DELETE",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("getArticle", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        return Jest.testPromise("default", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.getArticle("@slug@", /* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/articles/@slug@",
                                                    "GET",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("deleteArticle", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        return Jest.testPromise("default", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.deleteArticle("@slug@", /* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/articles/@slug@",
                                                    "DELETE",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("favoriteArticle", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        return Jest.testPromise("default", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.favoriteArticle("@slug@", /* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/articles/@slug@/favorite",
                                                    "POST",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("unfavoriteArticle", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        return Jest.testPromise("default", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.unfavoriteArticle("@slug@", /* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/articles/@slug@/favorite",
                                                    "DELETE",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("comments", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        return Jest.testPromise("default", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.comments("@slug@", /* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/articles/@slug@/comments",
                                                    "GET",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("addCommentsToAnArticle", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        return Jest.testPromise("default", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.addCommentsToAnArticle("@slug@", "@body@", /* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/articles/@slug@/comments",
                                                    "POST",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("deleteComment", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        return Jest.testPromise("default", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.deleteComment("@slug@", 12345, /* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/articles/@slug@/comments/12345",
                                                    "DELETE",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("user", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        return Jest.testPromise("default", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.user(/* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/user",
                                                    "GET",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("updateUser", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        return Jest.testPromise("default", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.updateUser("@email@", "@username@", "@password@", "@image@", "@bio@", /* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/user",
                                                    "PUT",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("register", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        return Jest.testPromise("default", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.register("@email@", "@password@", "@username@", /* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/users",
                                                    "POST",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("login", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        return Jest.testPromise("default", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.login("@email@", "@password@", /* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/users/login",
                                                    "POST",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("createArticle", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        return Jest.testPromise("default", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.createArticle("@title@", "@description@", "@body@", /* :: */[
                                    "@tag@",
                                    /* [] */0
                                  ], /* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/articles",
                                                    "POST",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

describe("updateArticle", (function () {
        beforeEach((function () {
                fetch.resetMocks();
                return JestFetchMock$ReasonReactRealworldExampleApp.mockResponse("\"ok\"", 200, "200", /* () */0);
              }));
        afterAll((function () {
                fetch.resetMocks();
                return /* () */0;
              }));
        return Jest.testPromise("default", undefined, (function () {
                      return API$ReasonReactRealworldExampleApp.updateArticle("@slug@", "@title@", "@description@", "@body@", /* :: */[
                                    "@tag@",
                                    /* [] */0
                                  ], /* () */0).then((function () {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "https://conduit.productionready.io/api/articles/@slug@",
                                                    "PUT",
                                                    "include"
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 0),
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).method,
                                                        Caml_array.caml_array_get(Caml_array.caml_array_get(fetch.mock.calls, 0), 1).credentials
                                                      ])));
                                  }));
                    }));
      }));

/*  Not a pure module */
